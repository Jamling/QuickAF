plugins {
    id "com.github.dcendents.android-maven" version "2.1"
    id "com.jfrog.bintray" version "1.8.4"
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply from : './android-maven.gradle'
apply from : './bintray.gradle'
android {
    compileSdkVersion Integer.parseInt(SDK_COMPILE)
    buildToolsVersion SDK_BUILD
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        test {
            java.srcDirs = ['test']
        }

        androidTest {
            java.srcDirs = ['androidTest']
        }
    }

    defaultConfig {
        minSdkVersion Integer.parseInt(SDK_MIN)
        targetSdkVersion Integer.parseInt(SDK_TARGET)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    // used for test
    // useLibrary('org.apache.http.legacy')

    // Gradle automatically adds 'android.test.runner' as a dependency.
    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api rootProject.ext.jetpackDepend.swiperefreshlayout
    api jetpackDepend.appcompat
    api jetpackDepend.fragment
    implementation jetpackDepend.recyclerview
    api commonDepend.slf4japi
    api commonDepend.gson
    api commonDepend.volley
    api commonDepend.utilscore

    testImplementation testDepend.junit4
    testImplementation commonDepend.okhttp3
    androidTestImplementation testDepend.espressocore
    androidTestImplementation testDepend.mockitoandroid
}

task hello {
    def release
    android.libraryVariants.all { variant ->
        println(variant)
        if (variant.name == 'release'){
            release = variant
        }
    }
    if (release)
    println("found:" + release.javaCompile.classpath.files)
    def android_sdk = "${android.sdkDirectory}"
    def android_platform = "${android.compileSdkVersion}"
    println(android_sdk)
    println(android_platform)
}